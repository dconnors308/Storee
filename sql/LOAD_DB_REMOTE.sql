/*
DROP DATABASE stohre;
CREATE DATABASE IF NOT EXISTS stohre;
USE stohre;
*/
USE u836275703_store;
/*--------------------------------------------------
					DROP TABLES
--------------------------------------------------*/
DROP TABLE IF EXISTS NOTIFICATIONS;
DROP TABLE IF EXISTS STORY_EDITS;
DROP TABLE IF EXISTS STORY_MEMBERS;
DROP TABLE IF EXISTS STORIES;
DROP TABLE IF EXISTS USERS;
/*--------------------------------------------------
					CREATE TABLES
--------------------------------------------------*/
CREATE TABLE IF NOT EXISTS USERS (
USER_ID VARCHAR(50) UNIQUE,
USER_NAME VARCHAR(25) UNIQUE,
PHOTO_URI VARCHAR(500),
DATE_CREATED DATETIME DEFAULT CURRENT_TIMESTAMP,
DATE_UPDATED DATETIME,
PRIMARY KEY (USER_ID)
); 
CREATE TABLE IF NOT EXISTS STORIES (
STORY_ID INT(8) UNSIGNED AUTO_INCREMENT,
USER_ID VARCHAR(50),
STORY_NAME VARCHAR(500),
STORY_TEXT MEDIUMTEXT,
ACTIVE_EDITOR_NUM INT(8) UNSIGNED,
USER_COUNT INT(8) UNSIGNED,
DATE_CREATED DATETIME DEFAULT CURRENT_TIMESTAMP,
DATE_UPDATED DATETIME,
PRIMARY KEY (STORY_ID),
FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS STORY_MEMBERS (
STORY_MEMBER_ID INT(8) UNSIGNED AUTO_INCREMENT,
STORY_ID INT(8) UNSIGNED,
USER_ID VARCHAR(50),
MODERATOR BOOLEAN,
EDITING_ORDER INT(8) UNSIGNED,
DATE_CREATED DATETIME DEFAULT CURRENT_TIMESTAMP,
DATE_UPDATED DATETIME,
PRIMARY KEY (STORY_MEMBER_ID),
FOREIGN KEY (STORY_ID) REFERENCES STORIES(STORY_ID) ON DELETE CASCADE, 
FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) 
);
CREATE TABLE IF NOT EXISTS STORY_EDITS (
STORY_EDIT_ID INT(8) UNSIGNED AUTO_INCREMENT,
STORY_ID INT(8) UNSIGNED,
USER_ID VARCHAR(50),
STORY_TEXT VARCHAR(100),
DATE_CREATED DATETIME DEFAULT CURRENT_TIMESTAMP,
DATE_UPDATED DATETIME,
PRIMARY KEY (STORY_EDIT_ID),
FOREIGN KEY (STORY_ID) REFERENCES STORIES(STORY_ID) ON DELETE CASCADE, 
FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) 
);
CREATE TABLE IF NOT EXISTS NOTIFICATIONS (
NOTIFICATION_ID INT(8) UNSIGNED AUTO_INCREMENT,
USER_ID VARCHAR(50),
USER_NAME VARCHAR(25),
STORY_NAME VARCHAR(500),
NOTIFICATION_TYPE VARCHAR(50),
NOTIFICATION_TEXT VARCHAR(50),
NOTIFICATION_STATUS VARCHAR(50),
DATE_CREATED DATETIME DEFAULT CURRENT_TIMESTAMP,
DATE_LAST_SENT DATETIME,
PRIMARY KEY (NOTIFICATION_ID),
FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)  ON DELETE CASCADE
);
DELIMITER //
CREATE TRIGGER NEW_STORY
AFTER INSERT
   ON STORIES FOR EACH ROW
BEGIN
   DECLARE MODERATOR BOOLEAN;
   SELECT TRUE INTO MODERATOR;
   INSERT INTO STORY_MEMBERS (STORY_ID,USER_ID,MODERATOR,EDITING_ORDER) VALUES (NEW.STORY_ID,NEW.USER_ID,MODERATOR,1);
END; //
DELIMITER ;

DELIMITER //
CREATE TRIGGER NEW_STORY_MEMBER
AFTER INSERT
   ON STORY_MEMBERS FOR EACH ROW
BEGIN
	INSERT INTO NOTIFICATIONS (USER_ID,USER_NAME,STORY_NAME,NOTIFICATION_TYPE,NOTIFICATION_TEXT,NOTIFICATION_STATUS) 
	SELECT
		U.USER_ID AS USER_ID,
		U.USER_NAME AS USER_NAME,
		S.STORY_NAME AS STORY_NAME,
		'NEW_STORY_MEMBER' AS NOTIFICATION_TYPE,
		CONCAT(U.USER_NAME,', youve been added to ',S.STORY_NAME) AS NOTIFICATION_TEXT,
		'INCEPTION' AS NOTIFICATION_STATUS
	FROM STORIES S
		JOIN STORY_MEMBERS SM ON S.STORY_ID = SM.STORY_ID
		JOIN USERS U ON SM.USER_ID = U.USER_ID
	WHERE 1=1
		AND U.USER_ID = NEW.USER_ID
		AND S.STORY_ID = NEW.STORY_ID
        AND SM.MODERATOR = 0;
   
END; //
DELIMITER ;

DELIMITER //
CREATE TRIGGER NEW_STORY_EDIT
AFTER INSERT
   ON STORY_EDITS FOR EACH ROW
BEGIN

	UPDATE STORIES SET ACTIVE_EDITOR_NUM = CASE
      WHEN ACTIVE_EDITOR_NUM + 1 > USER_COUNT THEN 1
      ELSE ACTIVE_EDITOR_NUM + 1
      END
      WHERE 1=1
      AND STORY_ID = NEW.STORY_ID;
      
	INSERT INTO NOTIFICATIONS (USER_ID,USER_NAME,STORY_NAME,NOTIFICATION_TYPE,NOTIFICATION_TEXT,NOTIFICATION_STATUS) 
	SELECT
		U.USER_ID AS USER_ID,
		U.USER_NAME AS USER_NAME,
		S.STORY_NAME AS STORY_NAME,
		'PENDING_STORY_EDIT' AS NOTIFICATION_TYPE,
		CONCAT('Its your turn ',U.USER_NAME,'!') AS NOTIFICATION_TEXT,
		'INCEPTION' AS NOTIFICATION_STATUS
	FROM STORIES S
		JOIN STORY_MEMBERS SM ON S.STORY_ID = SM.STORY_ID
		JOIN USERS U ON SM.USER_ID = U.USER_ID
	WHERE 1=1
		AND S.STORY_ID = NEW.STORY_ID
        AND SM.STORY_ID = NEW.STORY_ID
		AND SM.EDITING_ORDER = S.ACTIVE_EDITOR_NUM;
        
END; //
DELIMITER ;